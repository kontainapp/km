#
# Copyright 2021 Kontain Inc
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
name: on demand runner
on:
  pull_request:
    branches: [master]
    paths-ignore:
      # See https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions#filter-pattern-cheat-sheet
      - "**.md" # all .md files in repo
      - "**/docs/**" # all content of all docs/ dirs in repo
      - compile_commands.json
      - .vscode/**
      - km-releases
      - payloads/longhaul-test/**
      - "**/L0-image**"
  push:
    branches: [master] # , serge/on-demand]
    paths-ignore:
      - "**.md" # all .md files in repo
      - "**/docs/**" # all content of all docs/ dirs in repo
      - compile_commands.json
      - .vscode/**
      - km-releases
      - payloads/longhaul-test/**
      - "**/L0-image**"

  # schedule:
  #   # Posix cron format:
  #   # https://pubs.opengroup.org/onlinepubs/9699919799/utilities/crontab.html#tag_20_25_07
  #   # Minute Hour DayOfMonth MonthOfYear DayOfWeek
  #   - cron: "0 7 * * *" # Daily build midnight pacific time (UTC + 7)
  #   # Gitgub doc says:
  #   #    Scheduled workflows run on the latest commit on the default or base branch.
  #   #    The shortest interval you can run scheduled workflows is once every 5 minutes.

  # Manual trigger.
  # See https://github.blog/changelog/2020-07-06-github-actions-manual-triggers-with-workflow_dispatch/
  workflow_dispatch:
    inputs:
      run_type:
        description: "Run type: regular or nightly"
        default: "regular"
        required: true

env:
  BUILDENV_IMAGE_VERSION: latest # use this for all buildenv containers
  IMAGE_VERSION: ci-1143 # ci-${{ github.run_number }} # use this for all other containers
  # NIGHTLY_CLUSTER_NAME: "aks-kontain-nightly-ci-${{ github.run_number }}"
  SP_SUBSCRIPTION_ID: ${{ secrets.SP_SUBSCRIPTION_ID }}
  SP_APPID: ${{ secrets.SP_APPID }}
  SP_PASSWORD: ${{ secrets.SP_PASSWORD }}
  SP_TENANT: ${{ secrets.SP_TENANT }}
  # TRACE: true # uncomment to enable '-x' in all bash scripts

jobs:
  start-runner:
    name: Start self-hosted EC2 runner
    runs-on: ubuntu-latest
    outputs:
      label: ${{ steps.start-ec2-runner.outputs.label }}
      ec2-instance-id: ${{ steps.start-ec2-runner.outputs.ec2-instance-id }}
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: "us-east-2" # ${{ secrets.AWS_REGION }}

      - name: Start EC2 runner
        id: start-ec2-runner
        uses: kontainapp/ec2-github-runner@v3
        with:
          mode: start
          github-token: ${{ secrets.GH_TOKEN }}
          ec2-image-id: ami-00d8d2e0549213b4b
          ec2-instance-type: "m5.xlarge"
          subnet-id: subnet-989dc3e2
          security-group-id: sg-3b245d5e

  kkm-test:
    name: KM tests, KKM AWS and Azure VMs
    needs: start-runner
    runs-on: ${{ needs.start-runner.outputs.label }} # run the job on the newly created runner
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true

      - name: Build KKM and KKM tests
        run: make -C kkm/kkm -j && make -C kkm/test_kkm

      - name: Install KKM
        run: |
          sudo setenforce 0
          sudo insmod kkm/kkm/kkm.ko

      - name: Sanity check - unit test
        run: ./kkm/test_kkm/test_kkm

      - name: KM with KKM Test - AWS and Azure with packer
        run: |
          make -C cloud/azure login-cli
          make -C tests pull-testenv-image
          make -C tests test-withdocker HYPERVISOR_DEVICE=/dev/kkm DOCKER_INTERACTIVE= MATCH=hello
        # note: not using CI's 'timeout-minutes' to avoid a kill without cleaning resources

      - name: gather-logs
        if: failure()
        run: sudo journalctl -b --no-pager

  stop-runner:
    name: Terminate self-hosted EC2 runner
    needs: [start-runner, kkm-test]
    runs-on: ubuntu-latest
    if: ${{ ! failure() }}
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: "us-east-2"
      - name: Stop EC2 runner
        uses: kontainapp/ec2-github-runner@v3
        with:
          mode: stop
          github-token: ${{ secrets.GH_TOKEN }}
          label: ${{ needs.start-runner.outputs.label }}
          ec2-instance-id: ${{ needs.start-runner.outputs.ec2-instance-id }}

  stop-and-keep-runner:
    name: Stop self-hosted EC2 runner
    needs: [start-runner, kkm-test]
    runs-on: ubuntu-latest
    if: ${{ failure() }}
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: "us-east-2"
      - name: Suspend EC2 runner
        uses: kontainapp/ec2-github-runner@v3
        with:
          mode: suspend
          github-token: ${{ secrets.GH_TOKEN }}
          label: ${{ needs.start-runner.outputs.label }}
          ec2-instance-id: ${{ needs.start-runner.outputs.ec2-instance-id }}
