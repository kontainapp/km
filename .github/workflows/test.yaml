#
# Copyright 2022 Kontain Inc
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
name: Test composite actions
on:
  # Manual trigger.
  # See https://github.blog/changelog/2020-07-06-github-actions-manual-triggers-with-workflow_dispatch/
  workflow_dispatch:
    inputs:
      run_type:
        description: "Run type: regular or nightly"
        default: "regular"
        required: true

env:
  BUILDENV_IMAGE_VERSION: latest # use this for all buildenv containers
  IMAGE_VERSION: vg-ci-${{ github.run_number }} # use this for all other containers
  SP_SUBSCRIPTION_ID: ${{ secrets.SP_SUBSCRIPTION_ID }}
  SP_APPID: ${{ secrets.SP_APPID }}
  SP_PASSWORD: ${{ secrets.SP_PASSWORD }}
  SP_TENANT: ${{ secrets.SP_TENANT }}
  # TRACE: true # uncomment to enable '-x' in all bash scripts

jobs:
  # starts self-hosted runner in AWS and Azure. They are NOT ephemeral and will run until cleanup in the stop-runner
  # start-runners:
  #   uses: ./.github/workflows/start-cloud-runners.yaml
  #   secrets: inherit

  # km-build-coverage:
  #   name: Build KM for Coverage
  #   runs-on: ubuntu-20.04
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v4
  #       with:
  #         submodules: true

  #     - name: Build KM for coverage
  #       uses: ./.github/actions/km-build
  #       with:
  #         build-flavor: coverage

  # km-build-valgrind:
  #   name: Build KM for Valgrind
  #   runs-on: ubuntu-20.04
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v4
  #       with:
  #         submodules: true

  #     - name: Build KM for valgrind
  #       uses: ./.github/actions/km-build
  #       with:
  #         build-flavor: valgrind
  krun-static-build:
    name: Build static KRUN binary
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Set env
        run: echo "CRUN_SHA=$(cd container-runtime/crun/ && git rev-parse --short=12 HEAD)" >> $GITHUB_ENV

      # get persistent artifact that contains static krun
      # it will set step's output variable artifact-status to either 'available' or 'not-found'
      # Note: to figure out where krun needs to be rebuild ot not we use SHA of the container-runtime/crun/ directory
      # in teh step above. That SHA becomes artifact name. If there were changes to krun, SHA will change
      # forcing the re-build
      - name: Check if artifact exists
        id: check-artifact
        uses: kontainapp/persistent-artifact@v1
        with:
          github-token: ${{ secrets.GH_TOKEN }}
          artifact-name: ${{ env.CRUN_SHA}}
          path: /tmp/krun-static
          debug: true

      # if persistent artifact was not found, i.e output of the previous step artifact-status != 'available'
      # build krun
      - uses: actions/cache@v3
        if: ${{ steps.check-artifact.outputs.artifact-status != 'available' }}
        with:
          path: .cache
          key: nix-v1-${{ hashFiles('container-runtime/crun/nix/nixpkgs.json') }}

      - name: Build static krun
        if: ${{ steps.check-artifact.outputs.artifact-status != 'available' }}
        run: |
          set -x
          CRUN_DIR=$(pwd)/container-runtime/crun
          # These next two lines were taken from the crun release.yaml and build-aux/release.sh
          # to setup and execute a nix based build of stripped static
          if [[ -z $(ls -A /nix) ]]; then sudo docker run --rm --privileged -v /:/mnt nixos/nix:2.3.12 cp -rfT /nix /mnt/nix; fi
          sudo docker run --rm --privileged -v /nix:/nix -v ${CRUN_DIR}:${CRUN_DIR} -w ${CRUN_DIR} nixos/nix:2.3.12 nix build --print-build-logs --file nix/
          mkdir -p /tmp/krun-static
          cp ${CRUN_DIR}/result/bin/crun /tmp/krun-static/krun.static

      # if persistent artifact was not found, i.e output of the previous step artifact-status != 'available'
      # and was built in the previous step, upload it with SHA as artifact name
      - name: Upload krun-static under SHA to be available for persistent check (see above)
        uses: actions/upload-artifact@v3
        if: ${{ steps.check-artifact.outputs.artifact-status != 'available' }}
        with:
          name: ${{ env.CRUN_SHA}}
          path: /tmp/krun-static

      # regardless how we got krun-static (by retrieving persistent artifact or building)
      # upload it as krun-static artifact
      - name: Upload krun.static artifact
        uses: actions/upload-artifact@v3
        with:
          name: krun-static
          path: /tmp/krun-static/krun.static

  km-build:
    name: Build KM
    runs-on: ubuntu-20.04
    needs: [krun-static-build]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Build KM regular
        uses: ./.github/actions/km-build

      - uses: ./.github/actions/configure-krun
        with:
          target-dir: build/opt/kontain

      # - uses: ./.github/actions/configure-kkm

      - uses: ./.github/actions/run-tests
        with:
          kernel: kkm

  # km-test:
  #   name: KM, KVM on Azure
  #   runs-on: ${{ fromJSON(needs.start-runners.outputs.run-ons)['azure'] }}
  #   needs: [start-runners, km-build]
  #   steps:
  #     - uses: actions/checkout@v4
  #       with:
  #         submodules: true

  #     - run: make -C cloud/azure login-cli

  #     - run: |
  #         echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666"' > /tmp/rules
  #         sudo mv /tmp/rules /etc/udev/rules.d/99-perm.rules
  #         sudo udevadm control --reload-rules && sudo udevadm trigger

  #     - name: Pull testenv images
  #       run: make -C tests pull-valgrind-testenv-image

  #     - name: KM with KVM Test - Azure
  #       run: make -C tests test-valgrind-withdocker DOCKER_INTERACTIVE= DOCKER_RUN_CLEANUP=
  #       timeout-minutes: 60

  # kkm-test-vms:
  #   name: KM tests, KKM AWS
  #   needs: [start-runners, km-build]
  #   runs-on: ${{ fromJSON(needs.start-runners.outputs.run-ons)['ec2'] }}
  #   steps:
  #     - uses: actions/checkout@v4
  #       with:
  #         submodules: true

  #     - run: make -C cloud/azure login-cli

  #     - name: KKM and KKM tests
  #       run: |
  #         make -C kkm/kkm VALGRIND=1 && make -C kkm/test_kkm
  #         sudo insmod kkm/kkm/kkm.ko
  #         ./kkm/test_kkm/test_kkm

  #     - name: Pull testenv images
  #       run: make -C tests pull-valgrind-testenv-image

  #     - name: KM with KKM Test - AWS
  #       run: make -C tests test-valgrind-withdocker HYPERVISOR_DEVICE=/dev/kkm DOCKER_INTERACTIVE= DOCKER_RUN_CLEANUP=
  #       timeout-minutes: 60

  # slack-workflow-status:
  #   name: Notify slack, if needed
  #   runs-on: ubuntu-latest
  #   # 'contains' shows how to add conditions, e.g. on workflow 'name:', or many other contexts.
  #   # see https://docs.github.com/en/actions/reference/context-and-expression-syntax-for-github-actions
  #   if: (failure() && github.ref == 'refs/heads/master') ||
  #     contains(github.workflow, 'noisy')
  #   # Dependencies. (A skipped dependency is considered satisfied)
  #   needs:
  #     [
  #       km-build,
  #       km-test,
  #       kkm-test-vms,
  #     ]
  #   steps:
  #     - name: Send notification to slack
  #       uses: Gamesight/slack-workflow-status@master
  #       with:
  #         repo_token: ${{ secrets.GITHUB_TOKEN }}
  #         slack_webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
  #         include_jobs: true
  #         channel: "#build_and_test"
  #         name: "CI workflow status"
  #         icon_emoji: ":thumbsdown:"

  # This step is to clean up on-demand runner. They work in conjunction with start-runner.
  # Make sure to add dependencies in both "needs" clauses
  # stop-runner:
  #   if: always()
  #   needs: [start-runners]
  #   uses: ./.github/workflows/stop-cloud-runners.yaml
  #   secrets: inherit
