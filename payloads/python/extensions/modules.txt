#
# THIS FILE IS NOT USED ANYMORE, AND IS KEPT FOR A SHORT WHILE TO MAKE SURE MISC. COMMENTS ARE TRANSFERRED TO modules.json
#

# Extension modules to include in python.km
# TODO
# module_name [version]
# uses modules.json to get all details about the module. Module is supposed to be precompiled
#
# targets
#  fromsrc - just python
#  modules - generate modules.mk from modules.json , and run Make. in FROMSRC mode only
#  pack-modules - generate docker images
#  push-modules - push em
#  custom-km - build custom KM, with CONFIG=custom.json (default). Config defines what to take in. (module/version)
#    pick link files etc from dockerfile (pulls them first). Name is python-<custom>.km
#
# <module_name> <version> <url_for_source> "<dependency>"
# optional:
#   URL is optional and only needed for compiled modules
#   dependency is a binary dependency the module needs to build, e.g. cython for numpy.
#        for multiple dependencies, glue them with '\ ', e.g. cython\ bear
#
# Line with First character '#' is treated as comment, empty lines are ignore
#
# Note that some files here are purely build notes. Generally the ones with version and URL can be uncommented to be
#       added to the build
#
# This file is used from build_modules.sh

# Keeps track of all I tried, and notes on success/failure

# good:
# ------

markupsafe 1.1.1 https://github.com/pallets/markupsafe
#django 2.2.6
# hug 2.4.0 https://github.com/hugapi/hug
falcon 2.0.0 https://github.com/falconry/falcon
#gunicorn 19.9.0 none
#numpy v1.17.3 https://github.com/numpy/numpy cython
gevent  1.4.0 https://github.com/gevent/gevent cython
## ^^^^ NOTE: if atlas (Automatically Tuned Linear Algebra Software) is installed (with atlas-static),
#      this one picks it up and expect static libtatlas which is not avail (only libatlas.a is there)
#wrapt 1.11.2 https://github.com/GrahamDumpleton/wrapt
#pillow 7.0.0 https://github.com/python-pillow/Pillow
#Package "Pillow' but dir 'Modules/PIL' (has .so) works but needs manual intervention when building (compie and put stuff in link files)
# greenlet Unexpected location. hacked manually in link but so is directly in Lib/greenlet.cpython-37m-x86_64-linux-gnu.so - NEED CONFIG
# nameko - needs greenlet and pysistent python / .so and need xz-static (dnf) for lzma module


greenlet 0.4.15 https://github.com/python-greenlet/greenlet
pyrsistent v0.15.6 https://github.com/tobgu/pyrsistent

# .py only
#----------

#werkzeug 0.16.1
#pytz   2.0 none
#keras
#requests
#flask - py only
#pyasn1 v0.4.8 https://github.com/etingof/pyasn1 - .py only

# failures:
#----------

#scipy v1.3.2 https://github.com/scipy/scipy
# NEEDS: lapack-static blas-static and something form -lgfortran dnf package (Numerical linear algebra package libraries)
# Still tons of defintion conflicts , eg multiple for wrap_PyUFunc_getfperr and fegetround (I guess same .o picked up into different libs)
### AND BLAS also picjked up by numpy so it needs  static gfortran lib too

#matplotlib v3.1.1 https://github.com/matplotlib/matplotlib
# ^^ needs -lpng16 -lfreetype

# pandas v0.25.3 https://github.com/pandas-dev/pandas
# **** BUNCH OF C++ code, and something does not work in mangle/objcopy hack
# needs numpy (dependecy !)
# ^^^ mulitple dups. Plus unresolved __cxa_begin_catch and other _cxa_xxx)

#python-dateutil  2.8.1 https://github.com/dateutil/dateutil
# ^^^ This one is landing in a different folder (Lib/dateutil) - TODO check where it is getting it

# tensorflow
# 5 hr build with Bazel and there are no .so in the output. Needs investigation

#h5py 2.10.0 https://github.com/h5py/h5py
# needs libs. hdf5 hdf5-static (dnf). undefined: `__vasprintf_chk `__realpath_chk` SZ_encoder_enabled `SZ_BufftoBuffDecompress

#grpcio https://github.com/grpc/grpc/tree/master/src/python/grpcio
#^^^^^ needs gprc, pyton-dev, submodules; not standard build

# protobuf  v3.10.1 https://github.com/protocolbuffers/protobuf
# ^^^^ uses redirection to 'pth' mechanism - file cpython/Lib/protobuf-3.10.0-py3.7-nspkg.pth defines the code below.
#      *** needs investigation
# import sys, types, os;has_mfs = sys.version_info > (3, 5);p = os.path.join(sys._getframe(1).f_locals['sitedir'], *('google',));importlib = has_mfs and __import__('importlib.util');has_mfs and __import__('importlib.machinery');m = has_mfs and sys.modules.setdefault('google', importlib.util.module_from_spec(importlib.machinery.PathFinder.find_spec('google', [os.path.dirname(p)])));m = m or sys.modules.setdefault('google', types.ModuleType('google'));mp = (m or []) and m.__dict__.setdefault('__path__',[]);(p not in mp) and mp.append(p)


