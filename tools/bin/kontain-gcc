#!/bin/bash
#
# Copyright 2021 Kontain Inc
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
#
# Invoke gcc or g++ with extra params for Kontain link.
#
# Links native Alpine binaries (musl with syscalls) or Kontain binaries
# (musl with hcalls + some functions replacements/stubs/virtualization).
#
# Accepts the following extra options:
# ------------------------------------
# -kontain|-alpine Which binaries to build. Default 'kontain'
# -kv              Print a few kontain-specific options and the final gcc command
# --prefix=dir     Where resulting executable will look for dymanic libraries (rpath)
#
# Changes to behavior:
#--------------------------------------
# * '-static' is default now, use '-dynamic' or 'shared' to change.
# * dynlinker and rpath are hardcoded in ELF (Interpreter section, and NEEDED libs)
#    to point to --prefix (/opt/kontain/ by default)
# * Some link flags, text segment start and '-no-pie' or '-pie' are forced in some cases (see code below)
# * A few extra warnings added about flags redundancy/overlaps
#
# TODO:
# * need to add checks/warnings for conflicts around -pie/-nopie and other options we enforce

set -e ; [ "$TRACE" ] && set -x

cmd=${BASH_SOURCE[0]}
if [[ $cmd == *c++ || $cmd == *g++ ]] ; then
    REALGCC=g++
else
    REALGCC=gcc
fi
if [[ $# -eq 0 ]] ; then exec "${REALGCC}" ; fi

function cleanup() {
   # placeholder
   true
}
trap cleanup EXIT

# defaults
INSTALL_LOCATION=/opt/kontain
target=kontain
type=static

declare -a cargs
gc=1

# now check the args
for arg in "$@"
do
   case "$arg" in
      -static|-dynamic|-shared)
         type="${1#*-}"
         if [[ -n $type_set && $type != $type_set ]] ; then
            echo "Warning: type was already set to '$type_set', resetting to '$1'"
         fi
         type_set=$type
         ;;
      -alpine|-kontain)
         target="${1#*-}"
         if [[ -n $target_set && $target != $target_set ]] ; then
            echo "Warning: type was already set to '$target_set', resetting to '$1'"
         fi
         target_set=$target
         ;;
      --prefix=*)
         RPATH_LOCATION="${1#*=}"
         ;;
      -kv)
         verbose=1
         ;;
      # TODO: use this to check args for sanity
      -no-pie)
         no_pie_requested=1
         cargs+=(${arg})
         ;;
      -pie)
         pie_requested=1
         cargs+=(${arg})
         ;;
      -r)
         unset gc
         cargs+=(${arg})
         ;;
      *)
         cargs+=(\'$arg\')
         ;;
    esac
    shift
done

# build location is parent directory of the script directory
# /opt/kontain/bin/kontain-gcc --> /opt/kontain/bin --> /opt/kontain   for production
# or
# /home/user/..../km/build/opt/kontain/bin/kontain-gcc --> /home/user/..../km/build/opt/kontain/bin --> /home/user/..../km/build/opt/kontain/  for development build
# /usr/var/kontain/bin/kontain-gcc --> /usr/var/kontain/bin --> /usr/var/kontain for non-standard installation
BUILD_LOCATION=$(dirname $(dirname ${BASH_SOURCE[0]}))

#build location must exists
if [ ! -d $BUILD_LOCATION ] ; then
   echo "Error: $BUILD_LOCATION directory not found"
   exit 1
fi

if [ -z $RPATH_LOCATION ]; then
   RPATH_LOCATION=${BUILD_LOCATION}
fi

RPATH_RT=${RPATH_LOCATION}/runtime
RPATH_KL=${RPATH_LOCATION}/lib
RPATH_LC=${RPATH_LOCATION}/alpine-lib/usr/lib
RPATH_LL=${RPATH_LOCATION}/alpine-lib/lib

BUILD_RT=${BUILD_LOCATION}/runtime
BUILD_KL=${BUILD_LOCATION}/lib
BUILD_LC=${BUILD_LOCATION}/alpine-lib/usr/lib
BUILD_LL=${BUILD_LOCATION}/alpine-lib/lib

HCALL_DYNAMIC_LINKER=${RPATH_RT}/libc.so
ALPINE_DYNAMIC_LINKER=${RPATH_LL}/ld-musl-x86_64.so.1

# NOTE: libgcc location depends on gcc version in alpine container
# We save it during docker build (see tests/buildenv-fedora.dockerfile)
# and we use it during 'make .buildenv-local-lib'
gcc_path_file=${BUILD_LOCATION}/alpine-lib/gcc-libs-path.txt
if [ ! -f $gcc_path_file ] ; then
   echo "Error: $gcc_path_file is not found - check installation."
   exit 1
fi
RPATH_LGCC=${BUILD_LOCATION}/alpine-lib$(cat $gcc_path_file)
BUILD_LGCC=${BUILD_LOCATION}/alpine-lib$(cat $gcc_path_file)

# For both static and dynamic buids, locations to scout for libs, and common flags
ALPINE_PATH="-B${BUILD_LL} -B${BUILD_LC} -B${BUILD_LGCC}"
HCALL_PATH="-B${BUILD_RT} ${ALPINE_PATH} -zseparate-code -zmax-page-size=0x1000"

# rpath for dynamic builds
HCALL_RPATH="-Wl,-rpath=${RPATH_KL} -Wl,-rpath=${RPATH_RT} -Wl,-rpath=${RPATH_LL} -Wl,-rpath=${RPATH_LC} -Wl,-rpath=${RPATH_LGCC}"
ALPINE_RPATH="-Wl,-rpath=${RPATH_LL} -Wl,-rpath=${RPATH_LC} -Wl,-rpath=${RPATH_LGCC}"

# Flags for building kontain (hypercall-based) unikernels
HCALL_STATIC="-static   ${HCALL_PATH}                -no-pie -Wl,-Ttext-segment=0x200000"
HCALL_STATIC+=${gc:+" -Wl,--gc-sections"}
HCALL_DYNAMIC="-dynamic ${HCALL_PATH} ${HCALL_RPATH} -no-pie -Wl,-Ttext-segment=0x200000 -Wl,--dynamic-linker=${HCALL_DYNAMIC_LINKER}"
HCALL_SHARED="-shared   ${HCALL_PATH} ${HCALL_RPATH}"

# Flags for alpine native and kontain (hcall) builds
# Note: Alpine native dynamic work under KM only if built with explicit --pie or --Ttext-segment
ALPINE_STATIC="-static ${ALPINE_PATH}"
ALPINE_DYNAMIC="-dynamic ${ALPINE_PATH} ${ALPINE_RPATH} -pie -Wl,--dynamic-linker=${ALPINE_DYNAMIC_LINKER}"
# not tested:
APLINE_SHARED="-shared ${ALPINE_PATH} ${ALPINE_RPATH}"

# pure paranoia - check targets and libs
if [[ $target != alpine && $target != kontain ]] ; then
      echo "Error: Unknown target: $target (only alpine and kontain are supported)"
      exit 1
fi
for lib in ${BUILD_RT}/libruntime.a ${BUILD_RT}/libc.a ${BUILD_RT}/libc.so ${BUILD_LC}/libc.a ${BUILD_LC}/libc.so; do
   if [ ! -r $lib ] ; then
      echo "Error: can't find $lib - check installation"
      exit 1
   fi
done

# Now set correct search paths and args
case $type in
   static)
      if [[ $target = kontain ]] ; then
         KARGS=$HCALL_STATIC
      else
         KARGS=$ALPINE_STATIC
      fi
      ;;
   dynamic)
      if [[ $target = kontain ]] ; then
         KARGS=$HCALL_DYNAMIC
      else
         KARGS=$ALPINE_DYNAMIC
      fi
      ;;
   shared)
      if [[ $target = kontain ]] ; then
         KARGS=$HCALL_SHARED
      else
         echo "Warning: alpine -shared was not tested"
         KARGS=$APLINE_SHARED
      fi
      ;;
esac

if [[ -n "$KARGS" ]] ; then
   cargs=($KARGS ${cargs[@]})
fi

if [ -n "$verbose" ] ; then
   cat <<EOF
RPATH_$(basename $0): Compiler='${REALGCC}', -type='$type', -target='$target', --prefix='$PREFIX'
$(basename $0): pie_requested='$pie_requested' nopie_requested='$no_pie_requested' kverbose='$verbose'"
RPATH_$(basename $0): Command: ${REALGCC} ${cargs[@]}

EOF
fi

eval "${REALGCC}" ${cargs[@]}
